# on:
#   push:
#     branches:
#       - "release/*"

# name: Create Release and Push Docker Image

# jobs:
#   extract-version:
#     name: Build Job
#     runs-on: ubuntu-latest
#     outputs:
#       version: ${{ steps.extract_version.outputs.version }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Extract Version from Branch
#         id: extract_version
#         run: |
#           # Extract the version from the branch name
#           branch_name="${{ github.ref_name }}"
#           if [[ "$branch_name" =~ release\/(v[0-9]+\.[0-9]+) ]]; then
#             echo "version=${BASH_REMATCH[1]}" >> $GITHUB_ENV
#           else
#             echo "Branch name does not match release pattern" >&2
#             exit 1
#           fi

#       - name: Output Version
#         run: |
#           echo "::set-output name=version::$version" # Save version as output

#   build:
#     name: Build and Push Docker Image
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t myapp:latest .
#           docker tag myapp:latest myregistry.com/myapp:latest
#           docker push myregistry.com/myapp:latest
#         env:
#           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

#   release:
#     name: Create Release
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Create Release
#         id: create_release
#         uses: comnoco/create-release@v2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ env.version }}
#           release_name: Release ${{ env.version }}
#           body: |
#             Changes in this Release
#             - First Change
#             - Second Change
#           draft: false
#           prerelease: false

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t myapp:${{ env.version }} .
#           docker tag myapp:${{ env.version }} myregistry.com/myapp:${{ env.version }}
#           docker push myregistry.com/myapp:${{ env.version }}
#         env:
#           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
