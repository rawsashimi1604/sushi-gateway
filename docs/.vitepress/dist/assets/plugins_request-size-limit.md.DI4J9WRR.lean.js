import{_ as s,c as e,a2 as a,o as t}from"./chunks/framework.B1nutZSU.js";const c=JSON.parse('{"title":"Request Size Limit","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/request-size-limit.md","filePath":"plugins/request-size-limit.md"}'),l={name:"plugins/request-size-limit.md"};function n(o,i,r,p,h,u){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="request-size-limit" tabindex="-1">Request Size Limit <a class="header-anchor" href="#request-size-limit" aria-label="Permalink to &quot;Request Size Limit&quot;">​</a></h1><p>The Request Size Limit (<code>request_size_limit</code>) plugin ensures that incoming requests adhere to a defined maximum payload size. By enforcing size limits, this plugin helps protect APIs from large payload attacks, resource exhaustion, and unintentional misuse.</p><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>The plugin inspects the total request payload size in bytes and compares it against the configured <code>max_payload_size</code>. Requests exceeding the allowed size are rejected with a <strong>413 Payload Too Large</strong> response.</p><h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h3><ul><li>Enforces maximum payload size restrictions.</li><li>Protects against resource exhaustion and denial-of-service (DoS) attacks.</li><li>Configurable at global, service, or route levels for granular control.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Learn how to integrate this plugin into your setup in the <strong><a href="./../plugins/">Plugins Overview</a></strong>.</p></div><h2 id="configuration-fields" tabindex="-1">Configuration Fields <a class="header-anchor" href="#configuration-fields" aria-label="Permalink to &quot;Configuration Fields&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Example Value</th></tr></thead><tbody><tr><td><code>max_payload_size</code></td><td>Integer</td><td>Maximum allowed size of the request payload in bytes.</td><td><code>10</code></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Set the <code>max_payload_size</code> according to your API&#39;s expected payload size to optimize performance.</p></div><h2 id="example-configuration" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h2><p>Below is an example of configuring the Request Size Limit plugin:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;request_size_limit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;max_payload_size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h3><ul><li><strong><code>max_payload_size</code></strong>: Specifies the maximum allowable payload size in bytes. Requests exceeding this limit are rejected.</li></ul><h2 id="applying-the-plugin" tabindex="-1">Applying the Plugin <a class="header-anchor" href="#applying-the-plugin" aria-label="Permalink to &quot;Applying the Plugin&quot;">​</a></h2><p>The Request Size Limit plugin can be applied at various levels:</p><ol><li><strong>Global Level</strong>: Applies size limits to all incoming requests at the gateway level.</li><li><strong>Service Level</strong>: Restricts payload size for all routes within a service.</li><li><strong>Route Level</strong>: Enforces size limits on specific routes.</li></ol><p>Example of applying the plugin at the service level:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;request_size_limit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;max_payload_size&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Use route-level size limits for endpoints that handle large payloads, such as file uploads.</p></div><h2 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-label="Permalink to &quot;Use Cases&quot;">​</a></h2><ol><li><strong>Prevent Resource Exhaustion</strong>: Protect servers from processing overly large payloads.</li><li><strong>Improve API Stability</strong>: Ensure consistent performance by rejecting oversized requests.</li><li><strong>Enhance Security</strong>: Mitigate risks from malicious actors attempting to exploit large payload attacks.</li></ol><h2 id="tips-for-using-the-request-size-limit-plugin" tabindex="-1">Tips for Using the Request Size Limit Plugin <a class="header-anchor" href="#tips-for-using-the-request-size-limit-plugin" aria-label="Permalink to &quot;Tips for Using the Request Size Limit Plugin&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Combine this plugin with Rate Limiting to further secure your API against abusive traffic.</p></div><p>For more plugins, visit the <strong><a href="./../plugins/">Plugins Overview</a></strong>.</p>`,26)]))}const g=s(l,[["render",n]]);export{c as __pageData,g as default};
