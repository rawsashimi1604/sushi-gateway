import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.B1nutZSU.js";const d=JSON.parse('{"title":"Routing Overview","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/routing.md","filePath":"concepts/routing.md"}'),n={name:"concepts/routing.md"};function l(h,s,o,r,p,u){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="routing-overview" tabindex="-1">Routing Overview <a class="header-anchor" href="#routing-overview" aria-label="Permalink to &quot;Routing Overview&quot;">​</a></h1><p>Routing is a core feature of Sushi Gateway, directing API requests to the appropriate backend services. This mechanism leverages a structured system of Services, Routes, and Upstreams to ensure precision, scalability, and reliability in API traffic management.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Click <a href="./entities/">here</a> to understand more about the different entities in Sushi Gateway.</p></div><h2 id="how-routing-works" tabindex="-1">How Routing Works <a class="header-anchor" href="#how-routing-works" aria-label="Permalink to &quot;How Routing Works&quot;">​</a></h2><h3 id="request-structure" tabindex="-1">Request Structure <a class="header-anchor" href="#request-structure" aria-label="Permalink to &quot;Request Structure&quot;">​</a></h3><p>Sushi Gateway employs a <strong>path-based routing mechanism</strong>, using the protocol, HTTP method, and path to direct traffic to the appropriate backend services (Upstreams). Here’s how it works with an example request:</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://api.gateway.com:8443/sushi/restaurant</span></span></code></pre></div><h3 id="components-of-the-request" tabindex="-1">Components of the Request <a class="header-anchor" href="#components-of-the-request" aria-label="Permalink to &quot;Components of the Request&quot;">​</a></h3><ol><li><strong>Scheme</strong>: <code>https</code><ul><li>Specifies the communication protocol. Since we are using https, we are hitting the HTTPS endpoint of the gateway.</li></ul></li><li><strong>Domain</strong>: <code>api.gateway.com</code><ul><li>Identifies the API Gateway host.</li></ul></li><li><strong>Port</strong>: <code>8443</code><ul><li>Secure HTTPS port where gateway is hosted.</li></ul></li><li><strong>Service Path</strong>: <code>/sushi</code><ul><li>Matches the <code>base_path</code> of a Service entity.</li></ul></li><li><strong>Route Path</strong>: <code>/restaurant</code><ul><li>Matches the <code>path</code> of a Route within the Service.</li></ul></li></ol><h3 id="routing-workflow" tabindex="-1">Routing Workflow <a class="header-anchor" href="#routing-workflow" aria-label="Permalink to &quot;Routing Workflow&quot;">​</a></h3><ol><li><p><strong>Receive Request</strong>:</p><ul><li>The gateway receives the incoming request at <code>https://api.gateway.com:8443/sushi/restaurant</code>.</li></ul></li><li><p><strong>Match Service</strong>:</p><ul><li>The gateway matches <code>/sushi</code> to the <code>base_path</code> of a configured Service entity in memory.</li></ul></li><li><p><strong>Match Route</strong>:</p><ul><li>Within the matched Service, the gateway identifies <code>/restaurant</code> as the <code>path</code> of a Route.</li></ul></li><li><p><strong>Load Balancer</strong>:</p><ul><li>Based on the Service’s load balancing strategy, the gateway selects an appropriate upstream (e.g., <code>sushi.jp</code>).</li></ul></li><li><p><strong>Forward Request</strong>:</p><ul><li>Constructs the upstream path: <code>https://sushi.jp/restaurant</code>.</li><li>Applies middleware plugins before forwarding the request.</li></ul></li><li><p><strong>Process Response</strong>:</p><ul><li>Receives the response from the upstream, processes it through middleware plugins, and sends it back to the client.</li></ul></li></ol><h2 id="example-configuration" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h2><h3 id="service-definition" tabindex="-1">Service Definition <a class="header-anchor" href="#service-definition" aria-label="Permalink to &quot;Service Definition&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;services&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sushi-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;base_path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sushi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;protocol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;load_balancing_strategy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;round_robin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;upstreams&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;upstream_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;upstream_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;routes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;get-sushi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/restaurant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="request-flow" tabindex="-1">Request Flow <a class="header-anchor" href="#request-flow" aria-label="Permalink to &quot;Request Flow&quot;">​</a></h3><ol><li><strong>Request</strong>: <code>https://api.gateway.com:8443/sushi/restaurant</code></li><li><strong>Service Match</strong>: <ul><li><code>base_path</code>: <code>/sushi</code> → <code>sushi-service</code></li></ul></li><li><strong>Route Match</strong>: <ul><li><code>path</code>: <code>/restaurant</code> → <code>get-sushi</code></li></ul></li><li><strong>Upstream Selection</strong>: <ul><li>Load balancing strategy: <code>round_robin</code></li><li>Selected upstream: <code>localhost:8001</code></li></ul></li><li><strong>Final Upstream Path</strong>: <ul><li><code>https://localhost:8001/restaurant</code></li></ul></li></ol><h2 id="middleware-chain" tabindex="-1">Middleware Chain <a class="header-anchor" href="#middleware-chain" aria-label="Permalink to &quot;Middleware Chain&quot;">​</a></h2><h3 id="plugins-applied" tabindex="-1">Plugins Applied <a class="header-anchor" href="#plugins-applied" aria-label="Permalink to &quot;Plugins Applied&quot;">​</a></h3><ol><li><strong>Global Plugins</strong>: Configured at the gateway level.</li><li><strong>Service Plugins</strong>: Configured for the matched Service entity.</li><li><strong>Route Plugins</strong>: Configured for the matched Route entity.</li></ol><p>The gateway executes plugins in the following order:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global_plugins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service_plugins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> route_plugins</span></span></code></pre></div><h3 id="example-plugins" tabindex="-1">Example Plugins <a class="header-anchor" href="#example-plugins" aria-label="Permalink to &quot;Example Plugins&quot;">​</a></h3><ul><li><strong>Rate Limiting</strong>: Controls request limits per time window.</li><li><strong>Authentication</strong>: Enforces API key or JWT validation.</li></ul><h2 id="dynamic-api-path-routing-matching" tabindex="-1">Dynamic API Path Routing Matching <a class="header-anchor" href="#dynamic-api-path-routing-matching" aria-label="Permalink to &quot;Dynamic API Path Routing Matching&quot;">​</a></h2><p>Sushi Gateway also comes with Dynamic API path routing matchin support, allowing for flexible and reusable routes by using parameterized paths.</p><h3 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h3><p>In a route configuration, dynamic segments are defined using curly braces (<code>{}</code>) to represent placeholders for values. When an incoming request matches the dynamic segment, Sushi Gateway extracts the value and passes it to the upstream service or processes it as needed.</p><h3 id="example-configuration-1" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration-1" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;routes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;get-sushi-by-id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sushi/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="example-request-and-routing" tabindex="-1">Example Request and Routing <a class="header-anchor" href="#example-request-and-routing" aria-label="Permalink to &quot;Example Request and Routing&quot;">​</a></h3><h4 id="request" tabindex="-1">Request: <a class="header-anchor" href="#request" aria-label="Permalink to &quot;Request:&quot;">​</a></h4><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://api.gateway.com:8443/sushi/123</span></span></code></pre></div><h4 id="route-match" tabindex="-1">Route Match: <a class="header-anchor" href="#route-match" aria-label="Permalink to &quot;Route Match:&quot;">​</a></h4><ul><li><strong>Base Path</strong>: <code>/sushi</code></li><li><strong>Dynamic Segment</strong>: <code>{id}</code> → <code>123</code></li></ul><h4 id="upstream-request" tabindex="-1">Upstream Request: <a class="header-anchor" href="#upstream-request" aria-label="Permalink to &quot;Upstream Request:&quot;">​</a></h4><p>The dynamic value is included in the forwarded request to the upstream:</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://upstream-service/sushi/123</span></span></code></pre></div><p>For more details, refer to the <strong><a href="./../concepts/configuration/">Configuration Management Guide</a></strong>.</p>`,38)]))}const c=i(n,[["render",l]]);export{d as __pageData,c as default};
