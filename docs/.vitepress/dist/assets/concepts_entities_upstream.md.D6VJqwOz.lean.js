import{_ as t,c as i,a2 as s,o as a}from"./chunks/framework.CJ3Fe3Yg.js";const u=JSON.parse('{"title":"Upstream","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/entities/upstream.md","filePath":"concepts/entities/upstream.md"}'),n={name:"concepts/entities/upstream.md"};function r(o,e,l,d,p,h){return a(),i("div",null,e[0]||(e[0]=[s(`<h1 id="upstream" tabindex="-1">Upstream <a class="header-anchor" href="#upstream" aria-label="Permalink to &quot;Upstream&quot;">​</a></h1><p>An <strong>Upstream</strong> in Sushi Gateway represents a backend service or server to which API requests are forwarded. Upstreams are part of a service configuration and help distribute traffic across multiple instances.</p><h2 id="fields-in-an-upstream" tabindex="-1">Fields in an Upstream <a class="header-anchor" href="#fields-in-an-upstream" aria-label="Permalink to &quot;Fields in an Upstream&quot;">​</a></h2><p>An Upstream configuration consists of the following fields:</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>id</code></td><td>String</td><td>A unique identifier for the upstream.</td></tr><tr><td><code>host</code></td><td>String</td><td>The hostname or IP address of the backend server.</td></tr><tr><td><code>port</code></td><td>Number</td><td>The port number on which the backend server is listening.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Each upstream must have a unique <code>id</code> to avoid conflicts during configuration.</p></div><h2 id="example-configuration" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h2><p>Here’s an example of an upstream definition in <code>config.json</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;upstream_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example-upstream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="key-fields-explained" tabindex="-1">Key Fields Explained <a class="header-anchor" href="#key-fields-explained" aria-label="Permalink to &quot;Key Fields Explained&quot;">​</a></h3><ol><li><p><strong><code>id</code></strong>:</p><ul><li>A unique identifier for the upstream.</li><li>Example: <code>&quot;upstream_1&quot;</code>.</li></ul></li><li><p><strong><code>host</code></strong>:</p><ul><li>Specifies the hostname or IP address of the backend service.</li><li>Example: <code>&quot;example-upstream&quot;</code>.</li></ul></li><li><p><strong><code>port</code></strong>:</p><ul><li>Defines the port number where the backend service is running.</li><li>Example: <code>3000</code>.</li></ul></li></ol><h2 id="relationships-with-other-entities" tabindex="-1">Relationships with Other Entities <a class="header-anchor" href="#relationships-with-other-entities" aria-label="Permalink to &quot;Relationships with Other Entities&quot;">​</a></h2><p>Upstreams are closely associated with the following entities:</p><ul><li><strong><a href="./../entities/service.html">Service</a></strong>: Services define the upstreams used for routing traffic.</li><li><strong><a href="./../entities/route.html">Route</a></strong>: Routes determine how requests are directed to upstreams within a service.</li></ul><h2 id="load-balancing" tabindex="-1">Load Balancing <a class="header-anchor" href="#load-balancing" aria-label="Permalink to &quot;Load Balancing&quot;">​</a></h2><p>Upstreams are a critical component in load balancing strategies, such as:</p><ul><li><strong>Round Robin</strong>: Distributes traffic equally across all upstreams.</li><li><strong>Weighted</strong> <em>(in progress)</em>: Routes traffic based on predefined weights for each upstream.</li><li><strong>IP Hash</strong> <em>(in progress)</em>: Routes traffic based on the client IP address, ensuring consistent upstream selection.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Learn more about load balancing strategies in the <strong><a href="./../load-balancing.html">Load Balancing Concepts</a></strong> page.</p></div><hr><p>The Upstream entity is essential for connecting Sushi Gateway to backend services. To understand other entities, see:</p><ul><li><strong><a href="./../entities/service.html">Service</a></strong></li><li><strong><a href="./../entities/route.html">Route</a></strong></li><li><strong><a href="./../entities/plugin.html">Plugin</a></strong></li></ul>`,21)]))}const m=t(n,[["render",r]]);export{u as __pageData,m as default};
