import{_ as t,c as i,a2 as a,o}from"./chunks/framework.B1nutZSU.js";const p=JSON.parse('{"title":"Declarative Configuration in Sushi Gateway","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/declarative-config.md","filePath":"concepts/declarative-config.md"}'),n={name:"concepts/declarative-config.md"};function s(r,e,c,l,d,u){return o(),i("div",null,e[0]||(e[0]=[a('<h1 id="declarative-configuration-in-sushi-gateway" tabindex="-1">Declarative Configuration in Sushi Gateway <a class="header-anchor" href="#declarative-configuration-in-sushi-gateway" aria-label="Permalink to &quot;Declarative Configuration in Sushi Gateway&quot;">â€‹</a></h1><p>Sushi Gateway is designed with a stateless, declarative configuration approach, enabling flexibility and simplicity for various deployment scenarios. All configurations are provided through declarative files, such as config.json. This method eliminates the need for a database, making it ideal for:</p><ul><li>Testing and development environments.</li><li>Production environments with static, version-controlled configurations.</li><li>Scenarios where infrastructure automation (e.g., GitOps) is preferred.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For more in depth information about the configuration file, see the <strong><a href="./../concepts/configuration/files.html">Configuration Reference</a></strong></p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For step-by-step instructions on setting up Sushi Gateway with PostgreSQL, see the <strong><a href="./../getting-started/postgres.html">Installation Guide</a></strong>.</p></div>',5)]))}const g=t(n,[["render",s]]);export{p as __pageData,g as default};
