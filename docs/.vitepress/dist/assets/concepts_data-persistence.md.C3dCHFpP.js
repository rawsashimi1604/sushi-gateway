import{_ as a,c as i,a2 as e,o as t}from"./chunks/framework.CJ3Fe3Yg.js";const k=JSON.parse('{"title":"Data Persistence Modes in Sushi Gateway","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/data-persistence.md","filePath":"concepts/data-persistence.md"}'),n={name:"concepts/data-persistence.md"};function l(o,s,r,d,h,p){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="data-persistence-modes-in-sushi-gateway" tabindex="-1">Data Persistence Modes in Sushi Gateway <a class="header-anchor" href="#data-persistence-modes-in-sushi-gateway" aria-label="Permalink to &quot;Data Persistence Modes in Sushi Gateway&quot;">​</a></h1><p>Sushi Gateway supports two primary data persistence modes: <strong>Stateless</strong> and <strong>Stateful</strong>. These modes determine how configurations are managed and stored, providing flexibility based on deployment needs.</p><h2 id="stateless-mode" tabindex="-1">Stateless Mode <a class="header-anchor" href="#stateless-mode" aria-label="Permalink to &quot;Stateless Mode&quot;">​</a></h2><p>In Stateless Mode, configurations are provided as declarative files, such as <code>config.json</code>. This mode does not require a database, making it ideal for:</p><ul><li>Testing and development environments.</li><li>Scenarios with fixed configurations that do not require frequent updates.</li></ul><p>To configure Stateless Mode, set the following environment variable (<code>PERSISTENCE_CONFIG</code> will be set to <code>dbless</code> by default if not provided):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PERSISTENCE_CONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dbless</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For step-by-step instructions on setting up Sushi Gateway in Stateless Mode, see the <strong><a href="./../getting-started/docker.html">Quick Start with Docker Guide</a></strong>.</p></div><h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h3><ul><li>Simple setup with configuration files.</li><li>Lightweight and fast.</li><li>GitOps-friendly workflows for managing version-controlled configurations.</li></ul><h2 id="stateful-mode" tabindex="-1">Stateful Mode <a class="header-anchor" href="#stateful-mode" aria-label="Permalink to &quot;Stateful Mode&quot;">​</a></h2><p>Stateful Mode leverages a database to persist configurations and runtime data. This mode is suitable for:</p><ul><li>Production environments.</li><li>Deployments requiring dynamic updates to configurations.</li><li>High availability and resilience.</li></ul><h3 id="database-connection-configuration" tabindex="-1">Database Connection Configuration <a class="header-anchor" href="#database-connection-configuration" aria-label="Permalink to &quot;Database Connection Configuration&quot;">​</a></h3><p>For Stateful Mode, you need to specify database connection settings and additional options using environment variables. Sushi Gateway supports PostgreSQL.</p><p>Set the following environment variables:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PERSISTENCE_CONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">db</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PERSISTENCE_SYNC_INTERVAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_CONNECTION_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">database_host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_CONNECTION_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">database_port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_CONNECTION_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">database_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_CONNECTION_USER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">database_user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_CONNECTION_PASS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">database_password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><ul><li><strong><code>PERSISTENCE_SYNC_INTERVAL</code></strong>: Specifies how often (in seconds) the database should sync with the in-memory configuration.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For step-by-step instructions on setting up Sushi Gateway with PostgreSQL, see the <strong><a href="./../getting-started/postgres.html">Installation Guide</a></strong>.</p></div>`,19)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
