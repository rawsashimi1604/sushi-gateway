import{_ as e,c as a,a2 as s,o as i}from"./chunks/framework.CJ3Fe3Yg.js";const o="/images/architecture.png",g=JSON.parse('{"title":"Sushi Gateway Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/architecture.md","filePath":"concepts/architecture.md"}'),r={name:"concepts/architecture.md"};function n(l,t,d,u,c,h){return i(),a("div",null,t[0]||(t[0]=[s('<h1 id="sushi-gateway-architecture" tabindex="-1">Sushi Gateway Architecture <a class="header-anchor" href="#sushi-gateway-architecture" aria-label="Permalink to &quot;Sushi Gateway Architecture&quot;">​</a></h1><p>Sushi Gateway’s architecture is designed for flexibility, modularity, and scalability. It provides a robust API gateway solution that can handle diverse workloads and use cases. Below, we explore the core components, deployment modes, and networking of Sushi Gateway.</p><p><img src="'+o+'" alt="Sushi Gateway Architecture" title="Sushi Gateway Architecture Diagram"></p><h2 id="core-components" tabindex="-1">Core Components <a class="header-anchor" href="#core-components" aria-label="Permalink to &quot;Core Components&quot;">​</a></h2><h3 id="_1-sushi-proxy" tabindex="-1">1. Sushi Proxy <a class="header-anchor" href="#_1-sushi-proxy" aria-label="Permalink to &quot;1. Sushi Proxy&quot;">​</a></h3><p>The Sushi Proxy is the core component responsible for:</p><ul><li><strong>Routing</strong>: Directing requests to the appropriate upstream services based on defined configurations.</li><li><strong>Load Balancing</strong>: Distributing requests across multiple service instances using strategies like round-robin.</li><li><strong>Plugin Management</strong>: Executing configured plugins for authentication, rate limiting, and request transformation.</li></ul><h3 id="_2-sushi-manager" tabindex="-1">2. Sushi Manager <a class="header-anchor" href="#_2-sushi-manager" aria-label="Permalink to &quot;2. Sushi Manager&quot;">​</a></h3><p>Sushi Manager is a web-based user interface that simplifies:</p><ul><li><strong>Configuration Management</strong>: Visualize and modify gateway configurations.</li><li><strong>Monitoring</strong>: Track API usage and inspect logs in real-time.</li><li><strong>Testing</strong>: Quickly test routes and plugins through the interactive UI.</li></ul><h3 id="_3-data-storage-optional-in-stateful-mode" tabindex="-1">3. Data Storage (Optional in Stateful Mode) <a class="header-anchor" href="#_3-data-storage-optional-in-stateful-mode" aria-label="Permalink to &quot;3. Data Storage (Optional in Stateful Mode)&quot;">​</a></h3><p>For stateful deployments, Sushi Gateway relies on a database for persistent storage of configurations:</p><ul><li><strong>Supported Databases</strong>: PostgreSQL, MySQL, or other compatible systems.</li><li><strong>Purpose</strong>: Ensure that gateway configurations and runtime data persist across restarts.</li></ul><h2 id="deployment-modes" tabindex="-1">Deployment Modes <a class="header-anchor" href="#deployment-modes" aria-label="Permalink to &quot;Deployment Modes&quot;">​</a></h2><h3 id="_1-stateless-mode" tabindex="-1">1. Stateless Mode <a class="header-anchor" href="#_1-stateless-mode" aria-label="Permalink to &quot;1. Stateless Mode&quot;">​</a></h3><p>Stateless mode uses declarative configuration files and does not require a database. It is ideal for:</p><ul><li><strong>Testing and Development</strong>: Quickly prototype and validate configurations.</li><li><strong>GitOps Workflows</strong>: Manage configurations using version-controlled files.</li></ul><h3 id="_2-stateful-mode" tabindex="-1">2. Stateful Mode <a class="header-anchor" href="#_2-stateful-mode" aria-label="Permalink to &quot;2. Stateful Mode&quot;">​</a></h3><p>Stateful mode persists configurations in a database and is suited for:</p><ul><li><strong>Production Deployments</strong>: Handle large-scale systems with dynamic configurations.</li><li><strong>High Availability</strong>: Ensure data consistency and resilience.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Learn more about the differences between Stateless and Stateful modes in the <strong><a href="./../concepts/data-persistence.html">Data Persistence Guide</a></strong>.</p></div><h2 id="plugins-and-extensibility" tabindex="-1">Plugins and Extensibility <a class="header-anchor" href="#plugins-and-extensibility" aria-label="Permalink to &quot;Plugins and Extensibility&quot;">​</a></h2><p>Sushi Gateway adopts a modular approach with plugins to extend functionality. Plugins can:</p><ul><li><strong>Authenticate Requests</strong>: Support JWT, API keys, MTLS, and more.</li><li><strong>Rate Limit Traffic</strong>: Control the number of requests per user or service.</li><li><strong>Transform Requests and Responses</strong>: Modify payloads, headers, or protocols.</li></ul><h3 id="plugin-scopes" tabindex="-1">Plugin Scopes <a class="header-anchor" href="#plugin-scopes" aria-label="Permalink to &quot;Plugin Scopes&quot;">​</a></h3><p>Plugins can be applied at different scopes, allowing fine-grained customizability:</p><table tabindex="0"><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td><strong>Global</strong></td><td>Applies policies across all services.</td></tr><tr><td><strong>Service</strong></td><td>Applies policies to specific backend services.</td></tr><tr><td><strong>Route</strong></td><td>Tailors policies for individual API routes.</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Read about supported plugins and their configurations in the <strong><a href="./../plugins/">Plugins Guide</a></strong>.</p></div><h2 id="networking-and-ports" tabindex="-1">Networking and Ports <a class="header-anchor" href="#networking-and-ports" aria-label="Permalink to &quot;Networking and Ports&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Port</th><th>Protocol</th><th>Purpose</th></tr></thead><tbody><tr><td>8008</td><td>HTTP</td><td>Exposes the API Gateway for client requests.</td></tr><tr><td>8443</td><td>HTTPS</td><td>Provides secure communication using TLS.</td></tr><tr><td>8081</td><td>HTTP</td><td>Hosts the Admin API for managing configurations.</td></tr><tr><td>5173</td><td>HTTP</td><td>Runs the web-based UI for interacting with Sushi Gateway.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Ensure the appropriate ports are open in your firewall or networking settings for smooth operation.</p></div>',31)]))}const m=e(r,[["render",n]]);export{g as __pageData,m as default};
