import{_ as t,c as a,a2 as i,o as s}from"./chunks/framework.B1nutZSU.js";const g=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"docs-home.md","filePath":"docs-home.md"}'),n={name:"docs-home.md"};function o(r,e,l,u,c,d){return s(),a("div",null,e[0]||(e[0]=[i('<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><p>Welcome to the <strong>Sushi Gateway</strong> documentation! It is meant to serve as a reference resource for all things Sushi! Find all the information you need to use Sushi Gateway here.</p><h2 id="what-is-sushi-gateway" tabindex="-1">What is Sushi Gateway? <a class="header-anchor" href="#what-is-sushi-gateway" aria-label="Permalink to &quot;What is Sushi Gateway?&quot;">​</a></h2><p>Sushi Gateway serves as a <strong>Layer 7 API Gateway</strong> that simplifies API traffic management by handling:</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>An API Gateway acts as a reverse proxy that sits between clients and backend services, handling tasks such as request routing, security enforcement, and load balancing. For a deeper dive into what an API Gateway is, check out our <a href="./concepts/what-is-api-gateway.html">What is an API Gateway?</a> page.</p></div><ul><li><strong>Request Routing</strong>: Route requests to upstream services based on defined configurations.</li><li><strong>Security</strong>: Enforce robust security policies, including authentication, authorization, and rate limiting.</li><li><strong>Load Balancing</strong>: Efficiently distribute traffic across multiple instances to ensure system reliability.</li><li><strong>Extensibility</strong>: Customize and extend the gateway using modular plugins tailored to your specific needs.</li></ul><p>Sushi Gateway is designed to be simple, and flexible, making it an ideal solution for users who want to mordenize their API infrastructure.</p><h2 id="why-use-sushi-gateway" tabindex="-1">Why Use Sushi Gateway? <a class="header-anchor" href="#why-use-sushi-gateway" aria-label="Permalink to &quot;Why Use Sushi Gateway?&quot;">​</a></h2><p>Modern applications often rely on APIs for communication between services, clients, and third-party integrations. However, managing APIs in complex systems can present several challenges:</p><ul><li><strong>Security Risks</strong>: APIs can expose sensitive data and operations.</li><li><strong>Scaling Issues</strong>: Handling high-traffic scenarios without affecting performance.</li><li><strong>Operational Overhead</strong>: Configuring and monitoring APIs across distributed systems.</li></ul><p>Sushi Gateway addresses these challenges with:</p><h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h3><ul><li><strong>Modular Policy Architecture</strong><ul><li>Configure API plugins/policies at the global, service, or route scope for fine grained tuning.</li></ul></li><li><strong>High Performance</strong><ul><li>Built in <strong>Golang</strong>, optimized for concurrency and low latency.</li></ul></li><li><strong>Declarative Configuration</strong><ul><li>Stateless in-memory configuration makes for easy configuration and startup, reducing dependencies on a database.</li></ul></li><li><strong>Comprehensive Security</strong><ul><li>Includes authentication (JWT, Basic Auth, API Keys), rate limiting, and CORS policies.</li></ul></li><li><strong>Developer-Friendly</strong><ul><li>RESTful Admin API and intuitive UI for managing configurations.</li></ul></li></ul><h2 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to &quot;Architecture Overview&quot;">​</a></h2><h3 id="components" tabindex="-1">Components <a class="header-anchor" href="#components" aria-label="Permalink to &quot;Components&quot;">​</a></h3><p>Sushi Gateway comprises two primary components:</p><ol><li><strong>Sushi Proxy</strong><ul><li>Core gateway component handling request routing, load balancing, and applying plugins.</li></ul></li><li><strong>Sushi Manager</strong><ul><li>Web-based UI for monitoring and managing gateway configurations.</li></ul></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Try Sushi Gateway witt docker for an easy and fast setup. It uses declarative configuration files, making it perfect for testing or quick deployment scenarios. <a href="./getting-started/docker.html">Get started with our Quick Start Guide now</a>!</p></div><h2 id="supported-platforms" tabindex="-1">Supported Platforms <a class="header-anchor" href="#supported-platforms" aria-label="Permalink to &quot;Supported Platforms&quot;">​</a></h2><ul><li>Docker</li><li>Kubernetes via Helm (Coming soon!)</li></ul>',20)]))}const p=t(n,[["render",o]]);export{g as __pageData,p as default};
