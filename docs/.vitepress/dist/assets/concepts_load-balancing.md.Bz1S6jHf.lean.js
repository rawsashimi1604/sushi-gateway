import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.B1nutZSU.js";const g=JSON.parse('{"title":"Load Balancing","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/load-balancing.md","filePath":"concepts/load-balancing.md"}'),n={name:"concepts/load-balancing.md"};function l(o,s,r,h,p,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="load-balancing" tabindex="-1">Load Balancing <a class="header-anchor" href="#load-balancing" aria-label="Permalink to &quot;Load Balancing&quot;">​</a></h1><p>Load balancing in Sushi Gateway ensures that incoming API requests are distributed efficiently across upstream servers. It improves performance, reliability, and fault tolerance by managing how traffic is routed to backend services.</p><h2 id="supported-load-balancing-algorithms" tabindex="-1">Supported Load Balancing Algorithms <a class="header-anchor" href="#supported-load-balancing-algorithms" aria-label="Permalink to &quot;Supported Load Balancing Algorithms&quot;">​</a></h2><p>Sushi Gateway supports the following load balancing strategies:</p><h3 id="round-robin" tabindex="-1">Round Robin <a class="header-anchor" href="#round-robin" aria-label="Permalink to &quot;Round Robin&quot;">​</a></h3><ul><li><strong>Description</strong>: Distributes requests sequentially across all available upstreams.</li><li><strong>Use Case</strong>: Suitable for scenarios with equally capable upstreams and evenly distributed workloads.</li></ul><h3 id="weighted-in-progress" tabindex="-1">Weighted <em>(In Progress)</em> <a class="header-anchor" href="#weighted-in-progress" aria-label="Permalink to &quot;Weighted _(In Progress)_&quot;">​</a></h3><ul><li><strong>Description</strong>: Distributes requests based on predefined weights assigned to each upstream.</li><li><strong>Use Case</strong>: Ideal for scenarios where some upstreams have higher capacity or priority.</li></ul><h3 id="ip-hash" tabindex="-1">IP Hash <a class="header-anchor" href="#ip-hash" aria-label="Permalink to &quot;IP Hash&quot;">​</a></h3><ul><li><strong>Description</strong>: Routes requests based on the client’s IP address, ensuring consistent upstream selection for the same client via a consistent hash ring.</li><li><strong>Use Case</strong>: Useful for maintaining session persistence (sticky sessions).</li></ul><h2 id="example-configuration" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h2><p>Here’s an example of configuring load balancing in a <code>config.json</code> file:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;base_path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;protocol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;load_balancing_strategy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;round_robin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;upstreams&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;upstream_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example-app-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;upstream_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example-app-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h3><ul><li><strong><code>load_balancing_strategy</code></strong>: Defines the strategy to use (<code>round_robin</code>, <code>weighted</code>, or <code>ip_hash</code>).</li><li><strong><code>upstreams</code></strong>: Lists the backend servers to which requests are distributed.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Use <code>round_robin</code> for balanced traffic distribution when all upstreams have similar capacity.</p></div><h2 id="choosing-the-right-strategy" tabindex="-1">Choosing the Right Strategy <a class="header-anchor" href="#choosing-the-right-strategy" aria-label="Permalink to &quot;Choosing the Right Strategy&quot;">​</a></h2><p>The appropriate load balancing strategy depends on your use case:</p><table tabindex="0"><thead><tr><th>Strategy</th><th>Best For</th></tr></thead><tbody><tr><td>Round Robin</td><td>Uniform upstreams with similar capabilities.</td></tr><tr><td>Weighted</td><td>Upstreams with varying capacity or priorities.</td></tr><tr><td>IP Hash</td><td>Scenarios requiring session persistence (sticky sessions).</td></tr></tbody></table>`,19)]))}const c=i(n,[["render",l]]);export{g as __pageData,c as default};
