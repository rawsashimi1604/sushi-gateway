import{_ as e,c as i,a2 as a,o as s}from"./chunks/framework.B1nutZSU.js";const k=JSON.parse('{"title":"Environment Variable Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/configuration/environment.md","filePath":"concepts/configuration/environment.md"}'),n={name:"concepts/configuration/environment.md"};function o(r,t,d,l,h,c){return s(),i("div",null,t[0]||(t[0]=[a(`<h1 id="environment-variable-configuration" tabindex="-1">Environment Variable Configuration <a class="header-anchor" href="#environment-variable-configuration" aria-label="Permalink to &quot;Environment Variable Configuration&quot;">​</a></h1><p>Environment variables in Sushi Gateway allow for dynamic configuration of the gateway without modifying files. This method is especially useful in containerized environments, enabling seamless updates and integration with external tools.</p><h2 id="commonly-used-environment-variables" tabindex="-1">Commonly Used Environment Variables <a class="header-anchor" href="#commonly-used-environment-variables" aria-label="Permalink to &quot;Commonly Used Environment Variables&quot;">​</a></h2><p>The following table lists the key environment variables supported by Sushi Gateway:</p><table tabindex="0"><thead><tr><th>Variable</th><th>Description</th><th>Required</th><th>Example Value</th><th>Default Value</th></tr></thead><tbody><tr><td><code>CONFIG_FILE_PATH</code></td><td>Path to the <code>config.json</code> file for declarative configurations.</td><td>No</td><td><code>/app/config.json</code></td><td><code>/app/config.json</code></td></tr><tr><td><code>ADMIN_USER</code></td><td>Username for the Admin API.</td><td>Yes</td><td><code>admin</code></td><td><code>admin</code></td></tr><tr><td><code>ADMIN_PASSWORD</code></td><td>Password for the Admin API user.</td><td>Yes</td><td><code>changeme</code></td><td><code>changeme</code></td></tr><tr><td><code>SERVER_CERT_PATH</code></td><td>Path to the server certificate for HTTPS. Server certs will be self generated when not provided.</td><td>No</td><td><code>/path/to/cert.crt</code></td><td>-</td></tr><tr><td><code>SERVER_KEY_PATH</code></td><td>Path to the server private key for HTTPS. Server certs will be self generated when not provided</td><td>No</td><td><code>/path/to/key.pem</code></td><td>-</td></tr><tr><td><code>CA_CERT_PATH</code></td><td>Path to the Certificate Authority (CA) file for mutual TLS (mTLS). Required for MTLS plugin related configurations.</td><td>No</td><td><code>/path/to/ca.crt</code></td><td>-</td></tr></tbody></table><h2 id="example-configuration" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h2><p>Here’s an example of using environment variables to configure Sushi Gateway in a Docker container:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ADMIN_USER=admin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ADMIN_PASSWORD=securepassword</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8008:8008</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8443:8443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8081:8081</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  rawsashimi/sushi-proxy:0.3.0</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For a deeper understanding of declarative configurations, visit the <strong><a href="./files.html">Declarative Configuration Guide</a></strong>.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Ensure sensitive variables are stored securely using secret management tools (e.g., AWS Secrets Manager, HashiCorp Vault).</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For more information on TLS configuration, chewk out the <strong><a href="./../tls.html">Configuring TLS Guide</a></strong>.</p></div>`,11)]))}const m=e(n,[["render",o]]);export{k as __pageData,m as default};
