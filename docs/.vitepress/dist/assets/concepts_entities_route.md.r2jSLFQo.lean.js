import{_ as s,c as t,a2 as a,o as e}from"./chunks/framework.B1nutZSU.js";const u=JSON.parse('{"title":"Route","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/entities/route.md","filePath":"concepts/entities/route.md"}'),n={name:"concepts/entities/route.md"};function l(h,i,p,o,r,k){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="route" tabindex="-1">Route <a class="header-anchor" href="#route" aria-label="Permalink to &quot;Route&quot;">​</a></h1><p>A <strong>Route</strong> in Sushi Gateway defines how requests are handled for a specific API path. Routes determine the flow of traffic, specifying the backend service and applying necessary plugins or rules.</p><h2 id="fields-in-a-route" tabindex="-1">Fields in a Route <a class="header-anchor" href="#fields-in-a-route" aria-label="Permalink to &quot;Fields in a Route&quot;">​</a></h2><p>A Route configuration consists of the following fields:</p><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td>String</td><td>A unique identifier for the route.</td></tr><tr><td><code>path</code></td><td>String</td><td>The URL path that this route matches.</td></tr><tr><td><code>methods</code></td><td>Array of Strings</td><td>The HTTP methods supported by this route (e.g., <code>GET</code>, <code>POST</code>).</td></tr><tr><td><code>plugins</code></td><td><a href="./../entities/plugin.html">Plugin</a>[]</td><td>A list of plugins applied to this route for authentication, rate limiting, etc.</td></tr></tbody></table><h2 id="example-configuration" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h2><p>Here’s an example of a route definition in <code>config.json</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example-route&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/v1/sushi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;methods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rate_limit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;limit_second&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;limit_min&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;limit_hour&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="key-fields-explained" tabindex="-1">Key Fields Explained <a class="header-anchor" href="#key-fields-explained" aria-label="Permalink to &quot;Key Fields Explained&quot;">​</a></h3><ol><li><p><strong><code>name</code></strong>:</p><ul><li>A unique identifier for the route.</li><li>Example: <code>&quot;example-route&quot;</code>.</li></ul></li><li><p><strong><code>path</code></strong>:</p><ul><li>Specifies the URL path that the route matches.</li><li>Example: <code>&quot;/v1/sushi&quot;</code> matches requests to <code>/v1/sushi</code>.</li></ul></li><li><p><strong><code>methods</code></strong>:</p><ul><li>Defines the HTTP methods that this route supports.</li><li>Example: <code>[&quot;GET&quot;, &quot;POST&quot;]</code> allows both GET and POST requests.</li></ul></li><li><p><strong><code>plugins</code></strong>:</p><ul><li>Applies additional functionalities to the route, such as rate limiting or authentication.</li><li>Example:<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rate_limit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;limit_second&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;limit_min&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;limit_hour&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Explore all available plugins in the <strong><a href="./../../plugins/">Plugins Overview</a></strong> page for more information.</p></div></li></ol><h2 id="relationships-with-other-entities" tabindex="-1">Relationships with Other Entities <a class="header-anchor" href="#relationships-with-other-entities" aria-label="Permalink to &quot;Relationships with Other Entities&quot;">​</a></h2><p>Routes are associated with the following entities:</p><ul><li><strong><a href="./../entities/service.html">Service</a></strong>: Routes belong to a service and determine how requests are forwarded to upstreams.</li><li><strong><a href="./../entities/plugin.html">Plugin</a></strong>: Plugins enhance route functionality by adding features like authentication or traffic shaping.</li></ul><hr><p>The Route entity is crucial for managing traffic flow in Sushi Gateway. To understand other entities, see:</p><ul><li><strong><a href="./../entities/service.html">Service</a></strong></li><li><strong><a href="./../entities/upstream.html">Upstream</a></strong></li><li><strong><a href="./../entities/plugin.html">Plugin</a></strong></li></ul>`,16)]))}const E=s(n,[["render",l]]);export{u as __pageData,E as default};
