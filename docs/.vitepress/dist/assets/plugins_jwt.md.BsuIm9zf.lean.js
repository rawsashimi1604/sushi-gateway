import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.B1nutZSU.js";const c=JSON.parse('{"title":"JSON Web Token (JWT) Plugin","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/jwt.md","filePath":"plugins/jwt.md"}'),n={name:"plugins/jwt.md"};function l(h,s,o,p,r,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="json-web-token-jwt-plugin" tabindex="-1">JSON Web Token (JWT) Plugin <a class="header-anchor" href="#json-web-token-jwt-plugin" aria-label="Permalink to &quot;JSON Web Token (JWT) Plugin&quot;">​</a></h1><p>The JSON Web Token (JWT) (<code>jwt</code>) plugin provides a robust mechanism for securing APIs by validating signed tokens. This plugin ensures that only requests with valid JWTs can access your endpoints, enhancing authentication and authorization.</p><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>The JWT plugin inspects the <code>Authorization</code> header of incoming requests for a Bearer token. It validates the token’s signature and claims using the configured algorithm and secret or public key.</p><p>Currently, only <strong>HS256</strong> (HMAC-SHA256) and <strong>RS256</strong> (RSA-SHA256) is supported.</p><h3 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h3><ul><li>Supports token validation for stateless authentication.</li><li>Configurable issuer (<code>iss</code>) to ensure tokens come from trusted sources.</li><li>Validates token signatures using a secret key.</li><li>Validates token signatures against a public key.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Learn how to integrate this plugin into your setup in the <strong><a href="./../plugins/">Plugins Overview</a></strong>.</p></div><h2 id="configuration-fields" tabindex="-1">Configuration Fields <a class="header-anchor" href="#configuration-fields" aria-label="Permalink to &quot;Configuration Fields&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Field</th><th>Type</th><th>Description</th><th>Example Value</th></tr></thead><tbody><tr><td><code>alg</code></td><td>String</td><td>Algorithm for token signature validation (e.g., <code>HS256</code>).</td><td><code>HS256</code></td></tr><tr><td><code>iss</code></td><td>String</td><td>The expected issuer of the JWT.</td><td><code>someIssuerKey</code></td></tr><tr><td><code>secret</code></td><td>String</td><td>Secret key for validating the JWT signature.</td><td><code>123secret456</code></td></tr><tr><td><code>publicKey</code></td><td>String</td><td>Public key certificate.</td><td><code>some RSA public key here</code></td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Currently, only <strong>HS256</strong> is supported. Future releases will include support for <strong>RS256</strong>.</p></div><h2 id="example-configuration" tabindex="-1">Example Configuration <a class="header-anchor" href="#example-configuration" aria-label="Permalink to &quot;Example Configuration&quot;">​</a></h2><p>Below is an example of configuring the JWT plugin:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jwt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;iss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someIssuer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123secret456&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>As for and example for configuring the JWT plugin for <code>RS256</code> algorithms:</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The public key should be seperated by new lines: <code>\\n</code> as <code>json</code> files do not support multi-line strings.</p></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jwt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;iss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someIssuer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;publicKey&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-----BEGIN PUBLIC KEY-----</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnOAjYfgEIPkSuYR58sWr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">K21TeuRU03O2SAM9MxY4ojuK61SiX5cAEycQB7JL8okgAu1Sja8PXebPxX3mo+Ea</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1lCI+SZ27wBPpqeqpmDKxwbaacDFJYH7TaoctTX+pOuCtjS4h1BjrVaNn0SiLay2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">KfSJt0AGTppidQC6Llg7aG1LLMkjISzic3IHUR1s9fAVj85qAEY889LYfwitKzln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xGO68PkV1dOCsJCquFOSRF92nA/DC0IMIXHGXEMP/GlXo2S4MB6e9z8Ti+R0HV96</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">99RxtH/GLZM+J3no+Jk5zbiZpSzTJCecmETYpn+jrozDnpwH/dc5GFQhMIROSXX9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RQIDAQAB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-----END PUBLIC KEY-----&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h3><ul><li><strong><code>alg</code></strong>: Defines the algorithm for signature validation (only <code>HS256</code> and <code>RS256</code> is currently supported).</li><li><strong><code>iss</code></strong>: Specifies the trusted issuer of the token.</li><li><strong><code>secret</code></strong>: The secret key used for validating the token’s signature.</li><li><strong><code>publicKey</code></strong>: The public key used for validating the token’s signature.</li></ul><h2 id="example-http-header" tabindex="-1">Example HTTP Header <a class="header-anchor" href="#example-http-header" aria-label="Permalink to &quot;Example HTTP Header&quot;">​</a></h2><p>To authenticate with a JWT, include it in the <code>Authorization</code> header as a Bearer token:</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bearer &lt;your-jwt-token&gt;</span></span></code></pre></div><h3 id="example" tabindex="-1">Example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example:&quot;">​</a></h3><p>If the JWT is <code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code>, the header would look like:</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span></span></code></pre></div><h2 id="applying-the-plugin" tabindex="-1">Applying the Plugin <a class="header-anchor" href="#applying-the-plugin" aria-label="Permalink to &quot;Applying the Plugin&quot;">​</a></h2><p>The JWT plugin can be applied at various levels:</p><ol><li><strong>Global Level</strong>: Secures all services and routes with JWT validation.</li><li><strong>Service Level</strong>: Applies token validation to all routes under a specific service.</li><li><strong>Route Level</strong>: Provides granular control for specific routes requiring JWT validation.</li></ol><p>Example of applying the plugin globally:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jwt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;alg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HS256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;iss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;someIssuerKey&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123secret456&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Apply the plugin at the route level for APIs requiring fine-grained security.</p></div><h2 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-label="Permalink to &quot;Use Cases&quot;">​</a></h2><ol><li><strong>Stateless Authentication</strong>: Secure APIs by validating JWTs without maintaining session state.</li><li><strong>Multi-Tenant APIs</strong>: Use the <code>iss</code> claim to differentiate tenants or trusted sources.</li><li><strong>Enhance Security</strong>: Combine with plugins like Rate Limiting for robust access control.</li></ol><h2 id="tips-for-using-the-jwt-plugin" tabindex="-1">Tips for Using the JWT Plugin <a class="header-anchor" href="#tips-for-using-the-jwt-plugin" aria-label="Permalink to &quot;Tips for Using the JWT Plugin&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Ensure the <code>secret</code> is securely stored and rotated periodically to maintain security.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Use HTTPS to protect the token in transit and prevent interception by attackers.</p></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><strong><a href="https://datatracker.ietf.org/doc/html/rfc7519" target="_blank" rel="noreferrer">RFC 7519: JSON Web Token (JWT)</a></strong></li><li><strong><a href="https://jwt.io/" target="_blank" rel="noreferrer">JWT.io</a></strong></li></ul><p>For more plugins, visit the <strong><a href="./../plugins/">Plugins Overview</a></strong>.</p>`,39)]))}const u=i(n,[["render",l]]);export{c as __pageData,u as default};
